#!/vendor/bin/sh

SAR_EXEC_FILE="/vendor/bin/vendor_cmd_tool"
SAR_CFG_FILE="/vendor/etc/wifi/sar-vendor-cmd.xml"


WIFI_SAR_DISABLE_CMD_BODY="--ENABLE 5 --NUM_SPECS 0 --END_CMD"


# temp static value, should get from sysfs based on STA/SAP on/off status
# for android O, interface of SAP is softap0
get_wifi_iface() {
	echo "wlan0"
}

build_cmd_header() {
	iface="$(get_wifi_iface)"
	echo "-f $SAR_CFG_FILE -i $iface --START_CMD --SAR_SET"
}

build_cmd_body() {
	sarIdx="$1"
	prjVer="$2"

	# disable sar cmd body
	[ "0" -eq "$sarIdx" ] && echo "$WIFI_SAR_DISABLE_CMD_BODY" && return
	sarIdx=`expr $sarIdx - 1`

	echo "--ENABLE 7 --NUM_SPECS 2 --SAR_SPEC --NESTED_AUTO --CHAIN 0 --POW_IDX $sarIdx --END_ATTR --NESTED_AUTO --CHAIN 1 --POW_IDX $sarIdx --END_ATTR --END_ATTR --END_CMD"
	return

	# Normally we will never goto here, if process goes wrong, always disable sar.
	echo "$WIFI_SAR_DISABLE_CMD_BODY"
}

build_cmd() {
	cHdr="$(build_cmd_header)"
	cBody="$(build_cmd_body $1 $2)"

	echo "$cHdr $cBody"
}

apply_sar() {
	cmd="$(build_cmd $1 $2)"
	echo "cmd=$cmd"

	$SAR_EXEC_FILE $cmd
}

project_version=$(getprop "ro.separate.soft")
[ -z "$project_version" ] && return

# Note:
# 1. index of 1-n(n=arraySize-1) is for specific sar setting;
# 2. index of 0 is for disabling sar.
sarIdx=$(getprop "oppo.wifi.sar.idx" "0")

apply_sar "$sarIdx" "$project_version"
